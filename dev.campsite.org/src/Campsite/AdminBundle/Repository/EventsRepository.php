<?php

namespace Campsite\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * EventsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventsRepository extends EntityRepository
{
  /**
   * find Upcoming Events
   * @param integer $limit No of Records to Display
   * @return QueryBuilder
   */
  public function findUpcomingEvents($communityId=1,$limit=0)
  {
 
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('e')
        ->from('Campsite\AdminBundle\Entity\Events', 'e')	
		->Where('e.fromDate > :date')			
		->setParameter('date', date('Y-m-d H:i:s', time()))
        ->orderBy('e.fromDate', 'DESC');
	
	if($communityId!='') {
	  $qb->leftJoin('e.groups','g')
		 ->andWhere('g.community=:id')
		 ->setParameter('id', $communityId);	
	}
	/*$qb = $this->createQueryBuilder('e')
      ->where('e.fromDate > :date')
      ->setParameter('date', date('Y-m-d H:i:s', time()))
      ->orderBy('e.fromDate', 'DESC');*/
	  
	  if($limit!=0)
		$qb->setMaxResults($limit);	
	$query = $qb->getQuery();	
	
    return $query->getResult();
  }
  
  /**
   * find Recent Events
   * @param integer $limit No of Records to Display
   * @return QueryBuilder
   */
  public function findRecentEvents($communityId=1, $limit=0)
  {
	$qb = $this->createQueryBuilder('e')
      ->where('e.fromDate < :date')
      ->setParameter('date', date('Y-m-d H:i:s', time()))
      ->orderBy('e.fromDate', 'DESC');
	  
	if($communityId!='') {
	  $qb->leftJoin('e.groups','g')
		 ->andWhere('g.community=:id')
		 ->setParameter('id', $communityId);	
	}  
	if($limit!=0)
		$qb->setMaxResults($limit);
	$query = $qb->getQuery();	
    return $query->getResult();
  }
  
  /**
   * Find Events Based on Community
   *
   */
   public function findEventsByCommunity($communityId=1) 
   {
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('e')
        ->from('Campsite\AdminBundle\Entity\Events', 'e')	
		->leftJoin('e.groups','g')
		->where('g.community=:id')
		->setParameter('id', $communityId);
			
	//echo $query = $qb->getQuery()->getSql();exit;
	$query = $qb->getQuery();
	return $query->getResult();
   }
}